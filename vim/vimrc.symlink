" #######################
" ### Global Settings ###
" #######################

" Use the space key as our leader. Put this near the top of your vimrc
let mapleader = "\<Space>"

" Default shell
set shell=/bin/zsh
scriptencoding utf-8

" Load Plugins
source $HOME/.vimrc.bundles

" Colorscheme
let base16colorspace=256 " Access colors present in 256 colorspace
execute "colorscheme ".$THEME

" Custom Colors
" highlight Conceal cterm=NONE ctermbg=NONE ctermfg=darkred
highlight Comment cterm=italic

" Active mouse in terminal mode
if !has('nvim')
  set mouse=a ttymouse=xterm2
endif

" Encoding to UTF-8
set encoding=utf-8
set fileencoding=utf-8

" Switch of modelines (is a risk for security)
set modelines=0

" Automatic save at file switch
set autowrite

" Update buffer automatically, when changed by extern
set autoread

" Conceal
set conceallevel=0

" Backups
set undodir=$HOME/.vim/tmp/undo//
set backupdir=$HOME/.vim/tmp/backup//
set directory=$HOME/.vim/tmp/swap//
set backupskip=/tmp/*,/private/tmp/*
set backup
set writebackup
set noswapfile

" Persistent (G)undo files between sessions
set undofile
set history=1000
set undolevels=100

" Update time to 1 second (Default: 4 seconds)
set updatetime=1000

" No line break
set nowrap

" Line numbering
set relativenumber

" Mark lines longer than 81 characters
highlight ColorColumn ctermbg=Magenta
call matchadd('ColorColumn', '\%81v', 100)

" Increase line-height
set linespace=2

" Highlight line with cursor
set cursorline

" Show line and row of the cursor
set ruler

" Tabs and indentation
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab
set expandtab
set autoindent
set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
set copyindent
set shiftround

" Search on the oposite of the file when reaching end/beginning
set wrapscan

" Ignore case when searching (unless using capital letters)
set ignorecase
set smartcase

" use forward slash
set shellslash

" Height of command line
set ch=1

" No beeping
set visualbell

" Intuitive backspacing
set backspace=indent,eol,start

" Use hidden buffers
set hidden

" Don't delete the word, but put a $ to the end till exit the mode
set cpoptions+=$

" Fast terminal connection
set ttyfast

" Set title of the window
set title

" Show status line
set laststatus=2

" Hightlight matching paar (brackets etc.)
set showmatch

" Welcome screen (e. g. no welcome message)
set shortmess=aoOtI

" 256 colors
set t_Co=256

" Donâ€™t refresh while executing a macro
set lazyredraw

" Show partially completed commands
set showcmd

" Show the mode
set showmode

" Hide mouse cursor while typing
set mousehide

" Highlight search results
set hlsearch

" Switch of highlighting with ',h'
nnoremap <silent> <leader>h :nohlsearch<CR>
nnoremap <leader>th :call ToggleSearchHighlighting()<CR>

" Split edit your vimrc. Type space, v, r in sequence to trigger
nmap <leader>vr :sp $MYVIMRC<cr>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>so :source $MYVIMRC<cr>

" Save file
imap <C-s> <esc>:w<cr>

" Pre-populate a split command with the current directory
" nmap <leader>v :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Edit your vimrc in a new tab
nmap <leader>vi :tabedit ~/.vimrc<cr>

" Copy the entire buffer into the system register
nmap <leader>co ggVG*y

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" CommandT
if &term =~ "xterm" || &term =~ "screen"
  " let g:CommandTCancelMap = ['<ESC>', '<C-c>']
endif

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>

" RSpec
" let g:rspec_command = "call VtrSendCommand('rspec {spec}')"

"map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" syntastic
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" NERDTree
nmap <Leader>n :NERDTreeToggle<CR>

" ################
" ### Mappings ###
" ################

" ESC remapping
imap jk <ESC>

" Unmapping of arrow keys
noremap <down> <Nop>
noremap <left> <Nop>
noremap <right> <Nop>
noremap <up> <Nop>
inoremap <down> <Nop>
inoremap <left> <Nop>
inoremap <right> <Nop>
inoremap <up> <Nop>
vnoremap <down> <Nop>
vnoremap <left> <Nop>
vnoremap <right> <Nop>
vnoremap <up> <Nop>

" ctrlP config
let g:ctrlp_map = "<c-p>"
nnoremap <leader>t :CtrlPMRU<CR>
nnoremap <leader>bp :CtrlPBuffer<CR>

" airline
if !exists("g:airline_symbols")
  let g:airline_symbols = {}
endif
let g:airline_theme="powerlineish"
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#empty_message  =  "no .git"
let g:airline#extensions#whitespace#enabled    =  0
let g:airline#extensions#syntastic#enabled     =  1
let g:airline#extensions#tabline#enabled       =  1
let g:airline#extensions#tabline#tab_nr_type   =  1 " tab number
let g:airline#extensions#tabline#fnamecollapse =  1 " /a/m/model.rb
let g:airline#extensions#hunks#non_zero_only   =  1 " git gutter
